// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from game.proto</summary>
public static partial class GameReflection {

  #region Descriptor
  /// <summary>File descriptor for game.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GameReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpnYW1lLnByb3RvIiAKCFBvc2l0aW9uEgkKAXgYASABKAISCQoBeRgCIAEo",
          "AiIlCghCYXNlRGF0YRIKCgJocBgBIAEoBRINCgVtYXhIcBgCIAEoBSIyCglU",
          "b3dlckRhdGESDwoHdG93ZXJJZBgBIAEoBRIJCgF4GAIgASgCEgkKAXkYAyAB",
          "KAIiRgoLTW9uc3RlckRhdGESEQoJbW9uc3RlcklkGAEgASgFEhUKDW1vbnN0",
          "ZXJOdW1iZXIYAiABKAUSDQoFbGV2ZWwYAyABKAUiaAoQSW5pdGlhbEdhbWVT",
          "dGF0ZRIOCgZiYXNlSHAYASABKAUSEQoJdG93ZXJDb3N0GAIgASgFEhMKC2lu",
          "aXRpYWxHb2xkGAMgASgFEhwKFG1vbnN0ZXJTcGF3bkludGVydmFsGAQgASgF",
          "IucBCglHYW1lU3RhdGUSDAoEZ29sZBgBIAEoBRIXCgRiYXNlGAIgASgLMgku",
          "QmFzZURhdGESEQoJaGlnaFNjb3JlGAMgASgFEhoKBnRvd2VycxgEIAMoCzIK",
          "LlRvd2VyRGF0YRIeCghtb25zdGVycxgFIAMoCzIMLk1vbnN0ZXJEYXRhEhQK",
          "DG1vbnN0ZXJMZXZlbBgGIAEoBRINCgVzY29yZRgHIAEoBRIeCgttb25zdGVy",
          "UGF0aBgIIAMoCzIJLlBvc2l0aW9uEh8KDGJhc2VQb3NpdGlvbhgJIAEoCzIJ",
          "LlBvc2l0aW9uIkEKEkMyU1JlZ2lzdGVyUmVxdWVzdBIKCgJpZBgBIAEoCRIQ",
          "CghwYXNzd29yZBgCIAEoCRINCgVlbWFpbBgDIAEoCSJaChNTMkNSZWdpc3Rl",
          "clJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIh",
          "CghmYWlsQ29kZRgDIAEoDjIPLkdsb2JhbEZhaWxDb2RlIi8KD0MyU0xvZ2lu",
          "UmVxdWVzdBIKCgJpZBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSJmChBTMkNM",
          "b2dpblJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSDwoHbWVzc2FnZRgCIAEo",
          "CRINCgV0b2tlbhgDIAEoCRIhCghmYWlsQ29kZRgEIAEoDjIPLkdsb2JhbEZh",
          "aWxDb2RlIhEKD0MyU01hdGNoUmVxdWVzdCKKAQoZUzJDTWF0Y2hTdGFydE5v",
          "dGlmaWNhdGlvbhIrChBpbml0aWFsR2FtZVN0YXRlGAEgASgLMhEuSW5pdGlh",
          "bEdhbWVTdGF0ZRIeCgpwbGF5ZXJEYXRhGAIgASgLMgouR2FtZVN0YXRlEiAK",
          "DG9wcG9uZW50RGF0YRgDIAEoCzIKLkdhbWVTdGF0ZSKdAQoYUzJDU3RhdGVT",
          "eW5jTm90aWZpY2F0aW9uEhAKCHVzZXJHb2xkGAEgASgFEg4KBmJhc2VIcBgC",
          "IAEoBRIUCgxtb25zdGVyTGV2ZWwYAyABKAUSDQoFc2NvcmUYBCABKAUSGgoG",
          "dG93ZXJzGAUgAygLMgouVG93ZXJEYXRhEh4KCG1vbnN0ZXJzGAYgAygLMgwu",
          "TW9uc3RlckRhdGEiLwoXQzJTVG93ZXJQdXJjaGFzZVJlcXVlc3QSCQoBeBgB",
          "IAEoAhIJCgF5GAIgASgCIisKGFMyQ1Rvd2VyUHVyY2hhc2VSZXNwb25zZRIP",
          "Cgd0b3dlcklkGAEgASgFIkUKHFMyQ0FkZEVuZW15VG93ZXJOb3RpZmljYXRp",
          "b24SDwoHdG93ZXJJZBgBIAEoBRIJCgF4GAIgASgCEgkKAXkYAyABKAIiGAoW",
          "QzJTU3Bhd25Nb25zdGVyUmVxdWVzdCJDChdTMkNTcGF3bk1vbnN0ZXJSZXNw",
          "b25zZRIRCgltb25zdGVySWQYASABKAUSFQoNbW9uc3Rlck51bWJlchgCIAEo",
          "BSJMCiBTMkNTcGF3bkVuZW15TW9uc3Rlck5vdGlmaWNhdGlvbhIRCgltb25z",
          "dGVySWQYASABKAUSFQoNbW9uc3Rlck51bWJlchgCIAEoBSI7ChVDMlNUb3dl",
          "ckF0dGFja1JlcXVlc3QSDwoHdG93ZXJJZBgBIAEoBRIRCgltb25zdGVySWQY",
          "AiABKAUiRQofUzJDRW5lbXlUb3dlckF0dGFja05vdGlmaWNhdGlvbhIPCgd0",
          "b3dlcklkGAEgASgFEhEKCW1vbnN0ZXJJZBgCIAEoBSItChtDMlNNb25zdGVy",
          "QXR0YWNrQmFzZVJlcXVlc3QSDgoGZGFtYWdlGAEgASgFIkEKG1MyQ1VwZGF0",
          "ZUJhc2VIUE5vdGlmaWNhdGlvbhISCgppc09wcG9uZW50GAEgASgIEg4KBmJh",
          "c2VIcBgCIAEoBSIoChdTMkNHYW1lT3Zlck5vdGlmaWNhdGlvbhINCgVpc1dp",
          "bhgBIAEoCCITChFDMlNHYW1lRW5kUmVxdWVzdCIwChtDMlNNb25zdGVyRGVh",
          "dGhOb3RpZmljYXRpb24SEQoJbW9uc3RlcklkGAEgASgFIjUKIFMyQ0VuZW15",
          "TW9uc3RlckRlYXRoTm90aWZpY2F0aW9uEhEKCW1vbnN0ZXJJZBgBIAEoBSLl",
          "CQoKR2FtZVBhY2tldBIuCg9yZWdpc3RlclJlcXVlc3QYASABKAsyEy5DMlNS",
          "ZWdpc3RlclJlcXVlc3RIABIwChByZWdpc3RlclJlc3BvbnNlGAIgASgLMhQu",
          "UzJDUmVnaXN0ZXJSZXNwb25zZUgAEigKDGxvZ2luUmVxdWVzdBgDIAEoCzIQ",
          "LkMyU0xvZ2luUmVxdWVzdEgAEioKDWxvZ2luUmVzcG9uc2UYBCABKAsyES5T",
          "MkNMb2dpblJlc3BvbnNlSAASKAoMbWF0Y2hSZXF1ZXN0GAUgASgLMhAuQzJT",
          "TWF0Y2hSZXF1ZXN0SAASPAoWbWF0Y2hTdGFydE5vdGlmaWNhdGlvbhgGIAEo",
          "CzIaLlMyQ01hdGNoU3RhcnROb3RpZmljYXRpb25IABI6ChVzdGF0ZVN5bmNO",
          "b3RpZmljYXRpb24YByABKAsyGS5TMkNTdGF0ZVN5bmNOb3RpZmljYXRpb25I",
          "ABI4ChR0b3dlclB1cmNoYXNlUmVxdWVzdBgIIAEoCzIYLkMyU1Rvd2VyUHVy",
          "Y2hhc2VSZXF1ZXN0SAASOgoVdG93ZXJQdXJjaGFzZVJlc3BvbnNlGAkgASgL",
          "MhkuUzJDVG93ZXJQdXJjaGFzZVJlc3BvbnNlSAASQgoZYWRkRW5lbXlUb3dl",
          "ck5vdGlmaWNhdGlvbhgKIAEoCzIdLlMyQ0FkZEVuZW15VG93ZXJOb3RpZmlj",
          "YXRpb25IABI2ChNzcGF3bk1vbnN0ZXJSZXF1ZXN0GAsgASgLMhcuQzJTU3Bh",
          "d25Nb25zdGVyUmVxdWVzdEgAEjgKFHNwYXduTW9uc3RlclJlc3BvbnNlGAwg",
          "ASgLMhguUzJDU3Bhd25Nb25zdGVyUmVzcG9uc2VIABJKCh1zcGF3bkVuZW15",
          "TW9uc3Rlck5vdGlmaWNhdGlvbhgNIAEoCzIhLlMyQ1NwYXduRW5lbXlNb25z",
          "dGVyTm90aWZpY2F0aW9uSAASNAoSdG93ZXJBdHRhY2tSZXF1ZXN0GA4gASgL",
          "MhYuQzJTVG93ZXJBdHRhY2tSZXF1ZXN0SAASSAocZW5lbXlUb3dlckF0dGFj",
          "a05vdGlmaWNhdGlvbhgPIAEoCzIgLlMyQ0VuZW15VG93ZXJBdHRhY2tOb3Rp",
          "ZmljYXRpb25IABJAChhtb25zdGVyQXR0YWNrQmFzZVJlcXVlc3QYECABKAsy",
          "HC5DMlNNb25zdGVyQXR0YWNrQmFzZVJlcXVlc3RIABJAChh1cGRhdGVCYXNl",
          "SHBOb3RpZmljYXRpb24YESABKAsyHC5TMkNVcGRhdGVCYXNlSFBOb3RpZmlj",
          "YXRpb25IABI4ChRnYW1lT3Zlck5vdGlmaWNhdGlvbhgSIAEoCzIYLlMyQ0dh",
          "bWVPdmVyTm90aWZpY2F0aW9uSAASLAoOZ2FtZUVuZFJlcXVlc3QYEyABKAsy",
          "Ei5DMlNHYW1lRW5kUmVxdWVzdEgAEkAKGG1vbnN0ZXJEZWF0aE5vdGlmaWNh",
          "dGlvbhgUIAEoCzIcLkMyU01vbnN0ZXJEZWF0aE5vdGlmaWNhdGlvbkgAEkoK",
          "HWVuZW15TW9uc3RlckRlYXRoTm90aWZpY2F0aW9uGBUgASgLMiEuUzJDRW5l",
          "bXlNb25zdGVyRGVhdGhOb3RpZmljYXRpb25IAEIJCgdwYXlsb2FkKl0KDkds",
          "b2JhbEZhaWxDb2RlEggKBE5PTkUQABIRCg1VTktOT1dOX0VSUk9SEAESEwoP",
          "SU5WQUxJRF9SRVFVRVNUEAISGQoVQVVUSEVOVElDQVRJT05fRkFJTEVEEANi",
          "BnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GlobalFailCode), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Position), global::Position.Parser, new[]{ "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BaseData), global::BaseData.Parser, new[]{ "Hp", "MaxHp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerData), global::TowerData.Parser, new[]{ "TowerId", "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MonsterData), global::MonsterData.Parser, new[]{ "MonsterId", "MonsterNumber", "Level" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitialGameState), global::InitialGameState.Parser, new[]{ "BaseHp", "TowerCost", "InitialGold", "MonsterSpawnInterval" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameState), global::GameState.Parser, new[]{ "Gold", "Base", "HighScore", "Towers", "Monsters", "MonsterLevel", "Score", "MonsterPath", "BasePosition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SRegisterRequest), global::C2SRegisterRequest.Parser, new[]{ "Id", "Password", "Email" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CRegisterResponse), global::S2CRegisterResponse.Parser, new[]{ "Success", "Message", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SLoginRequest), global::C2SLoginRequest.Parser, new[]{ "Id", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CLoginResponse), global::S2CLoginResponse.Parser, new[]{ "Success", "Message", "Token", "FailCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SMatchRequest), global::C2SMatchRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CMatchStartNotification), global::S2CMatchStartNotification.Parser, new[]{ "InitialGameState", "PlayerData", "OpponentData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CStateSyncNotification), global::S2CStateSyncNotification.Parser, new[]{ "UserGold", "BaseHp", "MonsterLevel", "Score", "Towers", "Monsters" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2STowerPurchaseRequest), global::C2STowerPurchaseRequest.Parser, new[]{ "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CTowerPurchaseResponse), global::S2CTowerPurchaseResponse.Parser, new[]{ "TowerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAddEnemyTowerNotification), global::S2CAddEnemyTowerNotification.Parser, new[]{ "TowerId", "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SSpawnMonsterRequest), global::C2SSpawnMonsterRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CSpawnMonsterResponse), global::S2CSpawnMonsterResponse.Parser, new[]{ "MonsterId", "MonsterNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CSpawnEnemyMonsterNotification), global::S2CSpawnEnemyMonsterNotification.Parser, new[]{ "MonsterId", "MonsterNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2STowerAttackRequest), global::C2STowerAttackRequest.Parser, new[]{ "TowerId", "MonsterId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyTowerAttackNotification), global::S2CEnemyTowerAttackNotification.Parser, new[]{ "TowerId", "MonsterId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SMonsterAttackBaseRequest), global::C2SMonsterAttackBaseRequest.Parser, new[]{ "Damage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CUpdateBaseHPNotification), global::S2CUpdateBaseHPNotification.Parser, new[]{ "IsOpponent", "BaseHp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGameOverNotification), global::S2CGameOverNotification.Parser, new[]{ "IsWin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SGameEndRequest), global::C2SGameEndRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SMonsterDeathNotification), global::C2SMonsterDeathNotification.Parser, new[]{ "MonsterId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyMonsterDeathNotification), global::S2CEnemyMonsterDeathNotification.Parser, new[]{ "MonsterId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GamePacket), global::GamePacket.Parser, new[]{ "RegisterRequest", "RegisterResponse", "LoginRequest", "LoginResponse", "MatchRequest", "MatchStartNotification", "StateSyncNotification", "TowerPurchaseRequest", "TowerPurchaseResponse", "AddEnemyTowerNotification", "SpawnMonsterRequest", "SpawnMonsterResponse", "SpawnEnemyMonsterNotification", "TowerAttackRequest", "EnemyTowerAttackNotification", "MonsterAttackBaseRequest", "UpdateBaseHpNotification", "GameOverNotification", "GameEndRequest", "MonsterDeathNotification", "EnemyMonsterDeathNotification" }, new[]{ "Payload" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
/// 
///실패 코드
/// </summary>
public enum GlobalFailCode {
  [pbr::OriginalName("NONE")] None = 0,
  [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 1,
  [pbr::OriginalName("INVALID_REQUEST")] InvalidRequest = 2,
  [pbr::OriginalName("AUTHENTICATION_FAILED")] AuthenticationFailed = 3,
}

#region Enums
public enum MsgId
{
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("RegisterRequest")] C2SRegisterRequest = 1,
    [pbr::OriginalName("RegisterResponse")] S2CRegisterResponse = 2,
    [pbr::OriginalName("LoginRequest")] C2SLoginRequest = 3,
    [pbr::OriginalName("LoginResponse")] S2CLoginResponse = 4,
    [pbr::OriginalName("MatchRequest")] C2SMatchRequest = 5,
    [pbr::OriginalName("MatchStartNotification")] S2CMatchStartNotification = 6,
    [pbr::OriginalName("StateSyncNotification")] S2CStateSyncNotification = 7,
    [pbr::OriginalName("TowerPurchaseRequest")] C2STowerPurchaseRequest = 8,
    [pbr::OriginalName("TowerPurchaseResponse")] S2CTowerPurchaseResponse = 9,
    [pbr::OriginalName("AddEnemyTowerNotification")] S2CAddEnemyTowerNotification = 10,
    [pbr::OriginalName("SpawnMonsterRequest")] C2SSpawnMonsterRequest = 11,
    [pbr::OriginalName("SpawnMonsterResponse")] S2CSpawnMonsterResponse = 12,
    [pbr::OriginalName("SpawnEnemyMonsterNotification")] S2CSpawnEnemyMonsterNotification = 13,
    [pbr::OriginalName("TowerAttackRequest")] C2STowerAttackRequest = 14,
    [pbr::OriginalName("EnemyTowerAttackNotification")] S2CEnemyTowerAttackNotification = 15,
    [pbr::OriginalName("MonsterAttackBaseRequest")] C2SMonsterAttackBaseRequest = 16,
    [pbr::OriginalName("UpdateBaseHPNotification")] S2CUpdateBaseHpNotification = 17,
    [pbr::OriginalName("GameOverNotification")] S2CGameOverNotification = 18,
    [pbr::OriginalName("GameEndRequest")] C2SGameEndRequest = 19,
    [pbr::OriginalName("MonsterDeathNotification")] C2SMonsterDeathNotification = 20,
    [pbr::OriginalName("EnemyMonsterDeathNotification")] S2CEnemyMonsterDeathNotification = 21,
}

#endregion

#endregion

#region Messages
/// <summary>
/// 
///게임 데이터 명세
/// </summary>
public sealed partial class Position : pb::IMessage<Position> {
  private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Position> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position(Position other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position Clone() {
    return new Position(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Position);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Position other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Position other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class BaseData : pb::IMessage<BaseData> {
  private static readonly pb::MessageParser<BaseData> _parser = new pb::MessageParser<BaseData>(() => new BaseData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BaseData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BaseData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BaseData(BaseData other) : this() {
    hp_ = other.hp_;
    maxHp_ = other.maxHp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BaseData Clone() {
    return new BaseData(this);
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 1;
  private int hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "maxHp" field.</summary>
  public const int MaxHpFieldNumber = 2;
  private int maxHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxHp {
    get { return maxHp_; }
    set {
      maxHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BaseData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BaseData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hp != other.Hp) return false;
    if (MaxHp != other.MaxHp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Hp != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Hp);
    }
    if (MaxHp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MaxHp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
    }
    if (MaxHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BaseData other) {
    if (other == null) {
      return;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.MaxHp != 0) {
      MaxHp = other.MaxHp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Hp = input.ReadInt32();
          break;
        }
        case 16: {
          MaxHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TowerData : pb::IMessage<TowerData> {
  private static readonly pb::MessageParser<TowerData> _parser = new pb::MessageParser<TowerData>(() => new TowerData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerData(TowerData other) : this() {
    towerId_ = other.towerId_;
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerData Clone() {
    return new TowerData(this);
  }

  /// <summary>Field number for the "towerId" field.</summary>
  public const int TowerIdFieldNumber = 1;
  private int towerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TowerId {
    get { return towerId_; }
    set {
      towerId_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 3;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TowerId != other.TowerId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TowerId != 0) hash ^= TowerId.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TowerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TowerId);
    }
    if (X != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TowerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerData other) {
    if (other == null) {
      return;
    }
    if (other.TowerId != 0) {
      TowerId = other.TowerId;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TowerId = input.ReadInt32();
          break;
        }
        case 21: {
          X = input.ReadFloat();
          break;
        }
        case 29: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class MonsterData : pb::IMessage<MonsterData> {
  private static readonly pb::MessageParser<MonsterData> _parser = new pb::MessageParser<MonsterData>(() => new MonsterData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MonsterData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterData(MonsterData other) : this() {
    monsterId_ = other.monsterId_;
    monsterNumber_ = other.monsterNumber_;
    level_ = other.level_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MonsterData Clone() {
    return new MonsterData(this);
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 1;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  /// <summary>Field number for the "monsterNumber" field.</summary>
  public const int MonsterNumberFieldNumber = 2;
  private int monsterNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterNumber {
    get { return monsterNumber_; }
    set {
      monsterNumber_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MonsterData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MonsterData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonsterId != other.MonsterId) return false;
    if (MonsterNumber != other.MonsterNumber) return false;
    if (Level != other.Level) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (MonsterNumber != 0) hash ^= MonsterNumber.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MonsterId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MonsterId);
    }
    if (MonsterNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MonsterNumber);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (MonsterNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterNumber);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MonsterData other) {
    if (other == null) {
      return;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    if (other.MonsterNumber != 0) {
      MonsterNumber = other.MonsterNumber;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MonsterId = input.ReadInt32();
          break;
        }
        case 16: {
          MonsterNumber = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class InitialGameState : pb::IMessage<InitialGameState> {
  private static readonly pb::MessageParser<InitialGameState> _parser = new pb::MessageParser<InitialGameState>(() => new InitialGameState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InitialGameState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialGameState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialGameState(InitialGameState other) : this() {
    baseHp_ = other.baseHp_;
    towerCost_ = other.towerCost_;
    initialGold_ = other.initialGold_;
    monsterSpawnInterval_ = other.monsterSpawnInterval_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitialGameState Clone() {
    return new InitialGameState(this);
  }

  /// <summary>Field number for the "baseHp" field.</summary>
  public const int BaseHpFieldNumber = 1;
  private int baseHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaseHp {
    get { return baseHp_; }
    set {
      baseHp_ = value;
    }
  }

  /// <summary>Field number for the "towerCost" field.</summary>
  public const int TowerCostFieldNumber = 2;
  private int towerCost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TowerCost {
    get { return towerCost_; }
    set {
      towerCost_ = value;
    }
  }

  /// <summary>Field number for the "initialGold" field.</summary>
  public const int InitialGoldFieldNumber = 3;
  private int initialGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int InitialGold {
    get { return initialGold_; }
    set {
      initialGold_ = value;
    }
  }

  /// <summary>Field number for the "monsterSpawnInterval" field.</summary>
  public const int MonsterSpawnIntervalFieldNumber = 4;
  private int monsterSpawnInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterSpawnInterval {
    get { return monsterSpawnInterval_; }
    set {
      monsterSpawnInterval_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InitialGameState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InitialGameState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BaseHp != other.BaseHp) return false;
    if (TowerCost != other.TowerCost) return false;
    if (InitialGold != other.InitialGold) return false;
    if (MonsterSpawnInterval != other.MonsterSpawnInterval) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BaseHp != 0) hash ^= BaseHp.GetHashCode();
    if (TowerCost != 0) hash ^= TowerCost.GetHashCode();
    if (InitialGold != 0) hash ^= InitialGold.GetHashCode();
    if (MonsterSpawnInterval != 0) hash ^= MonsterSpawnInterval.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BaseHp != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BaseHp);
    }
    if (TowerCost != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TowerCost);
    }
    if (InitialGold != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(InitialGold);
    }
    if (MonsterSpawnInterval != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MonsterSpawnInterval);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BaseHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseHp);
    }
    if (TowerCost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerCost);
    }
    if (InitialGold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialGold);
    }
    if (MonsterSpawnInterval != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterSpawnInterval);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InitialGameState other) {
    if (other == null) {
      return;
    }
    if (other.BaseHp != 0) {
      BaseHp = other.BaseHp;
    }
    if (other.TowerCost != 0) {
      TowerCost = other.TowerCost;
    }
    if (other.InitialGold != 0) {
      InitialGold = other.InitialGold;
    }
    if (other.MonsterSpawnInterval != 0) {
      MonsterSpawnInterval = other.MonsterSpawnInterval;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BaseHp = input.ReadInt32();
          break;
        }
        case 16: {
          TowerCost = input.ReadInt32();
          break;
        }
        case 24: {
          InitialGold = input.ReadInt32();
          break;
        }
        case 32: {
          MonsterSpawnInterval = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GameState : pb::IMessage<GameState> {
  private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState(GameState other) : this() {
    gold_ = other.gold_;
    base_ = other.base_ != null ? other.base_.Clone() : null;
    highScore_ = other.highScore_;
    towers_ = other.towers_.Clone();
    monsters_ = other.monsters_.Clone();
    monsterLevel_ = other.monsterLevel_;
    score_ = other.score_;
    monsterPath_ = other.monsterPath_.Clone();
    basePosition_ = other.basePosition_ != null ? other.basePosition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState Clone() {
    return new GameState(this);
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 1;
  private int gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "base" field.</summary>
  public const int BaseFieldNumber = 2;
  private global::BaseData base_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BaseData Base {
    get { return base_; }
    set {
      base_ = value;
    }
  }

  /// <summary>Field number for the "highScore" field.</summary>
  public const int HighScoreFieldNumber = 3;
  private int highScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HighScore {
    get { return highScore_; }
    set {
      highScore_ = value;
    }
  }

  /// <summary>Field number for the "towers" field.</summary>
  public const int TowersFieldNumber = 4;
  private static readonly pb::FieldCodec<global::TowerData> _repeated_towers_codec
      = pb::FieldCodec.ForMessage(34, global::TowerData.Parser);
  private readonly pbc::RepeatedField<global::TowerData> towers_ = new pbc::RepeatedField<global::TowerData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TowerData> Towers {
    get { return towers_; }
  }

  /// <summary>Field number for the "monsters" field.</summary>
  public const int MonstersFieldNumber = 5;
  private static readonly pb::FieldCodec<global::MonsterData> _repeated_monsters_codec
      = pb::FieldCodec.ForMessage(42, global::MonsterData.Parser);
  private readonly pbc::RepeatedField<global::MonsterData> monsters_ = new pbc::RepeatedField<global::MonsterData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonsterData> Monsters {
    get { return monsters_; }
  }

  /// <summary>Field number for the "monsterLevel" field.</summary>
  public const int MonsterLevelFieldNumber = 6;
  private int monsterLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterLevel {
    get { return monsterLevel_; }
    set {
      monsterLevel_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 7;
  private int score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "monsterPath" field.</summary>
  public const int MonsterPathFieldNumber = 8;
  private static readonly pb::FieldCodec<global::Position> _repeated_monsterPath_codec
      = pb::FieldCodec.ForMessage(66, global::Position.Parser);
  private readonly pbc::RepeatedField<global::Position> monsterPath_ = new pbc::RepeatedField<global::Position>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Position> MonsterPath {
    get { return monsterPath_; }
  }

  /// <summary>Field number for the "basePosition" field.</summary>
  public const int BasePositionFieldNumber = 9;
  private global::Position basePosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position BasePosition {
    get { return basePosition_; }
    set {
      basePosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gold != other.Gold) return false;
    if (!object.Equals(Base, other.Base)) return false;
    if (HighScore != other.HighScore) return false;
    if(!towers_.Equals(other.towers_)) return false;
    if(!monsters_.Equals(other.monsters_)) return false;
    if (MonsterLevel != other.MonsterLevel) return false;
    if (Score != other.Score) return false;
    if(!monsterPath_.Equals(other.monsterPath_)) return false;
    if (!object.Equals(BasePosition, other.BasePosition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Gold != 0) hash ^= Gold.GetHashCode();
    if (base_ != null) hash ^= Base.GetHashCode();
    if (HighScore != 0) hash ^= HighScore.GetHashCode();
    hash ^= towers_.GetHashCode();
    hash ^= monsters_.GetHashCode();
    if (MonsterLevel != 0) hash ^= MonsterLevel.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    hash ^= monsterPath_.GetHashCode();
    if (basePosition_ != null) hash ^= BasePosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Gold != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Gold);
    }
    if (base_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Base);
    }
    if (HighScore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HighScore);
    }
    towers_.WriteTo(output, _repeated_towers_codec);
    monsters_.WriteTo(output, _repeated_monsters_codec);
    if (MonsterLevel != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(MonsterLevel);
    }
    if (Score != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Score);
    }
    monsterPath_.WriteTo(output, _repeated_monsterPath_codec);
    if (basePosition_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(BasePosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Gold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (base_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
    }
    if (HighScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighScore);
    }
    size += towers_.CalculateSize(_repeated_towers_codec);
    size += monsters_.CalculateSize(_repeated_monsters_codec);
    if (MonsterLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterLevel);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    size += monsterPath_.CalculateSize(_repeated_monsterPath_codec);
    if (basePosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasePosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameState other) {
    if (other == null) {
      return;
    }
    if (other.Gold != 0) {
      Gold = other.Gold;
    }
    if (other.base_ != null) {
      if (base_ == null) {
        Base = new global::BaseData();
      }
      Base.MergeFrom(other.Base);
    }
    if (other.HighScore != 0) {
      HighScore = other.HighScore;
    }
    towers_.Add(other.towers_);
    monsters_.Add(other.monsters_);
    if (other.MonsterLevel != 0) {
      MonsterLevel = other.MonsterLevel;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    monsterPath_.Add(other.monsterPath_);
    if (other.basePosition_ != null) {
      if (basePosition_ == null) {
        BasePosition = new global::Position();
      }
      BasePosition.MergeFrom(other.BasePosition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Gold = input.ReadInt32();
          break;
        }
        case 18: {
          if (base_ == null) {
            Base = new global::BaseData();
          }
          input.ReadMessage(Base);
          break;
        }
        case 24: {
          HighScore = input.ReadInt32();
          break;
        }
        case 34: {
          towers_.AddEntriesFrom(input, _repeated_towers_codec);
          break;
        }
        case 42: {
          monsters_.AddEntriesFrom(input, _repeated_monsters_codec);
          break;
        }
        case 48: {
          MonsterLevel = input.ReadInt32();
          break;
        }
        case 56: {
          Score = input.ReadInt32();
          break;
        }
        case 66: {
          monsterPath_.AddEntriesFrom(input, _repeated_monsterPath_codec);
          break;
        }
        case 74: {
          if (basePosition_ == null) {
            BasePosition = new global::Position();
          }
          input.ReadMessage(BasePosition);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 
///패킷 명세
/// </summary>
public sealed partial class C2SRegisterRequest : pb::IMessage<C2SRegisterRequest> {
  private static readonly pb::MessageParser<C2SRegisterRequest> _parser = new pb::MessageParser<C2SRegisterRequest>(() => new C2SRegisterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SRegisterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SRegisterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SRegisterRequest(C2SRegisterRequest other) : this() {
    id_ = other.id_;
    password_ = other.password_;
    email_ = other.email_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SRegisterRequest Clone() {
    return new C2SRegisterRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 3;
  private string email_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Email {
    get { return email_; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SRegisterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SRegisterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Password != other.Password) return false;
    if (Email != other.Email) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (Email.Length != 0) hash ^= Email.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (Email.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Email);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (Email.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SRegisterRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.Email.Length != 0) {
      Email = other.Email;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
        case 26: {
          Email = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CRegisterResponse : pb::IMessage<S2CRegisterResponse> {
  private static readonly pb::MessageParser<S2CRegisterResponse> _parser = new pb::MessageParser<S2CRegisterResponse>(() => new S2CRegisterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CRegisterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CRegisterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CRegisterResponse(S2CRegisterResponse other) : this() {
    success_ = other.success_;
    message_ = other.message_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CRegisterResponse Clone() {
    return new S2CRegisterResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 3;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CRegisterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CRegisterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (Message != other.Message) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (FailCode != global::GlobalFailCode.None) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (FailCode != global::GlobalFailCode.None) {
      output.WriteRawTag(24);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (FailCode != global::GlobalFailCode.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CRegisterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    if (other.FailCode != global::GlobalFailCode.None) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
        case 24: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SLoginRequest : pb::IMessage<C2SLoginRequest> {
  private static readonly pb::MessageParser<C2SLoginRequest> _parser = new pb::MessageParser<C2SLoginRequest>(() => new C2SLoginRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SLoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SLoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SLoginRequest(C2SLoginRequest other) : this() {
    id_ = other.id_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SLoginRequest Clone() {
    return new C2SLoginRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SLoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SLoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SLoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CLoginResponse : pb::IMessage<S2CLoginResponse> {
  private static readonly pb::MessageParser<S2CLoginResponse> _parser = new pb::MessageParser<S2CLoginResponse>(() => new S2CLoginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CLoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CLoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CLoginResponse(S2CLoginResponse other) : this() {
    success_ = other.success_;
    message_ = other.message_;
    token_ = other.token_;
    failCode_ = other.failCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CLoginResponse Clone() {
    return new S2CLoginResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 3;
  private string token_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "failCode" field.</summary>
  public const int FailCodeFieldNumber = 4;
  private global::GlobalFailCode failCode_ = global::GlobalFailCode.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GlobalFailCode FailCode {
    get { return failCode_; }
    set {
      failCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CLoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CLoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (Message != other.Message) return false;
    if (Token != other.Token) return false;
    if (FailCode != other.FailCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (FailCode != global::GlobalFailCode.None) hash ^= FailCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Token);
    }
    if (FailCode != global::GlobalFailCode.None) {
      output.WriteRawTag(32);
      output.WriteEnum((int) FailCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    if (FailCode != global::GlobalFailCode.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CLoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    if (other.FailCode != global::GlobalFailCode.None) {
      FailCode = other.FailCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
        case 26: {
          Token = input.ReadString();
          break;
        }
        case 32: {
          FailCode = (global::GlobalFailCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SMatchRequest : pb::IMessage<C2SMatchRequest> {
  private static readonly pb::MessageParser<C2SMatchRequest> _parser = new pb::MessageParser<C2SMatchRequest>(() => new C2SMatchRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SMatchRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchRequest(C2SMatchRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchRequest Clone() {
    return new C2SMatchRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SMatchRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SMatchRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SMatchRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class S2CMatchStartNotification : pb::IMessage<S2CMatchStartNotification> {
  private static readonly pb::MessageParser<S2CMatchStartNotification> _parser = new pb::MessageParser<S2CMatchStartNotification>(() => new S2CMatchStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CMatchStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMatchStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMatchStartNotification(S2CMatchStartNotification other) : this() {
    initialGameState_ = other.initialGameState_ != null ? other.initialGameState_.Clone() : null;
    playerData_ = other.playerData_ != null ? other.playerData_.Clone() : null;
    opponentData_ = other.opponentData_ != null ? other.opponentData_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMatchStartNotification Clone() {
    return new S2CMatchStartNotification(this);
  }

  /// <summary>Field number for the "initialGameState" field.</summary>
  public const int InitialGameStateFieldNumber = 1;
  private global::InitialGameState initialGameState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InitialGameState InitialGameState {
    get { return initialGameState_; }
    set {
      initialGameState_ = value;
    }
  }

  /// <summary>Field number for the "playerData" field.</summary>
  public const int PlayerDataFieldNumber = 2;
  private global::GameState playerData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameState PlayerData {
    get { return playerData_; }
    set {
      playerData_ = value;
    }
  }

  /// <summary>Field number for the "opponentData" field.</summary>
  public const int OpponentDataFieldNumber = 3;
  private global::GameState opponentData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameState OpponentData {
    get { return opponentData_; }
    set {
      opponentData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CMatchStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CMatchStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(InitialGameState, other.InitialGameState)) return false;
    if (!object.Equals(PlayerData, other.PlayerData)) return false;
    if (!object.Equals(OpponentData, other.OpponentData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (initialGameState_ != null) hash ^= InitialGameState.GetHashCode();
    if (playerData_ != null) hash ^= PlayerData.GetHashCode();
    if (opponentData_ != null) hash ^= OpponentData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (initialGameState_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(InitialGameState);
    }
    if (playerData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerData);
    }
    if (opponentData_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(OpponentData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (initialGameState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialGameState);
    }
    if (playerData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
    }
    if (opponentData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpponentData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CMatchStartNotification other) {
    if (other == null) {
      return;
    }
    if (other.initialGameState_ != null) {
      if (initialGameState_ == null) {
        InitialGameState = new global::InitialGameState();
      }
      InitialGameState.MergeFrom(other.InitialGameState);
    }
    if (other.playerData_ != null) {
      if (playerData_ == null) {
        PlayerData = new global::GameState();
      }
      PlayerData.MergeFrom(other.PlayerData);
    }
    if (other.opponentData_ != null) {
      if (opponentData_ == null) {
        OpponentData = new global::GameState();
      }
      OpponentData.MergeFrom(other.OpponentData);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (initialGameState_ == null) {
            InitialGameState = new global::InitialGameState();
          }
          input.ReadMessage(InitialGameState);
          break;
        }
        case 18: {
          if (playerData_ == null) {
            PlayerData = new global::GameState();
          }
          input.ReadMessage(PlayerData);
          break;
        }
        case 26: {
          if (opponentData_ == null) {
            OpponentData = new global::GameState();
          }
          input.ReadMessage(OpponentData);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CStateSyncNotification : pb::IMessage<S2CStateSyncNotification> {
  private static readonly pb::MessageParser<S2CStateSyncNotification> _parser = new pb::MessageParser<S2CStateSyncNotification>(() => new S2CStateSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CStateSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CStateSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CStateSyncNotification(S2CStateSyncNotification other) : this() {
    userGold_ = other.userGold_;
    baseHp_ = other.baseHp_;
    monsterLevel_ = other.monsterLevel_;
    score_ = other.score_;
    towers_ = other.towers_.Clone();
    monsters_ = other.monsters_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CStateSyncNotification Clone() {
    return new S2CStateSyncNotification(this);
  }

  /// <summary>Field number for the "userGold" field.</summary>
  public const int UserGoldFieldNumber = 1;
  private int userGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserGold {
    get { return userGold_; }
    set {
      userGold_ = value;
    }
  }

  /// <summary>Field number for the "baseHp" field.</summary>
  public const int BaseHpFieldNumber = 2;
  private int baseHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaseHp {
    get { return baseHp_; }
    set {
      baseHp_ = value;
    }
  }

  /// <summary>Field number for the "monsterLevel" field.</summary>
  public const int MonsterLevelFieldNumber = 3;
  private int monsterLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterLevel {
    get { return monsterLevel_; }
    set {
      monsterLevel_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 4;
  private int score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "towers" field.</summary>
  public const int TowersFieldNumber = 5;
  private static readonly pb::FieldCodec<global::TowerData> _repeated_towers_codec
      = pb::FieldCodec.ForMessage(42, global::TowerData.Parser);
  private readonly pbc::RepeatedField<global::TowerData> towers_ = new pbc::RepeatedField<global::TowerData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TowerData> Towers {
    get { return towers_; }
  }

  /// <summary>Field number for the "monsters" field.</summary>
  public const int MonstersFieldNumber = 6;
  private static readonly pb::FieldCodec<global::MonsterData> _repeated_monsters_codec
      = pb::FieldCodec.ForMessage(50, global::MonsterData.Parser);
  private readonly pbc::RepeatedField<global::MonsterData> monsters_ = new pbc::RepeatedField<global::MonsterData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MonsterData> Monsters {
    get { return monsters_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CStateSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CStateSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserGold != other.UserGold) return false;
    if (BaseHp != other.BaseHp) return false;
    if (MonsterLevel != other.MonsterLevel) return false;
    if (Score != other.Score) return false;
    if(!towers_.Equals(other.towers_)) return false;
    if(!monsters_.Equals(other.monsters_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserGold != 0) hash ^= UserGold.GetHashCode();
    if (BaseHp != 0) hash ^= BaseHp.GetHashCode();
    if (MonsterLevel != 0) hash ^= MonsterLevel.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    hash ^= towers_.GetHashCode();
    hash ^= monsters_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserGold != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserGold);
    }
    if (BaseHp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BaseHp);
    }
    if (MonsterLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MonsterLevel);
    }
    if (Score != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Score);
    }
    towers_.WriteTo(output, _repeated_towers_codec);
    monsters_.WriteTo(output, _repeated_monsters_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserGold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserGold);
    }
    if (BaseHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseHp);
    }
    if (MonsterLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterLevel);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    size += towers_.CalculateSize(_repeated_towers_codec);
    size += monsters_.CalculateSize(_repeated_monsters_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CStateSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.UserGold != 0) {
      UserGold = other.UserGold;
    }
    if (other.BaseHp != 0) {
      BaseHp = other.BaseHp;
    }
    if (other.MonsterLevel != 0) {
      MonsterLevel = other.MonsterLevel;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    towers_.Add(other.towers_);
    monsters_.Add(other.monsters_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UserGold = input.ReadInt32();
          break;
        }
        case 16: {
          BaseHp = input.ReadInt32();
          break;
        }
        case 24: {
          MonsterLevel = input.ReadInt32();
          break;
        }
        case 32: {
          Score = input.ReadInt32();
          break;
        }
        case 42: {
          towers_.AddEntriesFrom(input, _repeated_towers_codec);
          break;
        }
        case 50: {
          monsters_.AddEntriesFrom(input, _repeated_monsters_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2STowerPurchaseRequest : pb::IMessage<C2STowerPurchaseRequest> {
  private static readonly pb::MessageParser<C2STowerPurchaseRequest> _parser = new pb::MessageParser<C2STowerPurchaseRequest>(() => new C2STowerPurchaseRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2STowerPurchaseRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2STowerPurchaseRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2STowerPurchaseRequest(C2STowerPurchaseRequest other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2STowerPurchaseRequest Clone() {
    return new C2STowerPurchaseRequest(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2STowerPurchaseRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2STowerPurchaseRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2STowerPurchaseRequest other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CTowerPurchaseResponse : pb::IMessage<S2CTowerPurchaseResponse> {
  private static readonly pb::MessageParser<S2CTowerPurchaseResponse> _parser = new pb::MessageParser<S2CTowerPurchaseResponse>(() => new S2CTowerPurchaseResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CTowerPurchaseResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CTowerPurchaseResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CTowerPurchaseResponse(S2CTowerPurchaseResponse other) : this() {
    towerId_ = other.towerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CTowerPurchaseResponse Clone() {
    return new S2CTowerPurchaseResponse(this);
  }

  /// <summary>Field number for the "towerId" field.</summary>
  public const int TowerIdFieldNumber = 1;
  private int towerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TowerId {
    get { return towerId_; }
    set {
      towerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CTowerPurchaseResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CTowerPurchaseResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TowerId != other.TowerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TowerId != 0) hash ^= TowerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TowerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TowerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TowerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CTowerPurchaseResponse other) {
    if (other == null) {
      return;
    }
    if (other.TowerId != 0) {
      TowerId = other.TowerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TowerId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CAddEnemyTowerNotification : pb::IMessage<S2CAddEnemyTowerNotification> {
  private static readonly pb::MessageParser<S2CAddEnemyTowerNotification> _parser = new pb::MessageParser<S2CAddEnemyTowerNotification>(() => new S2CAddEnemyTowerNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CAddEnemyTowerNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAddEnemyTowerNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAddEnemyTowerNotification(S2CAddEnemyTowerNotification other) : this() {
    towerId_ = other.towerId_;
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAddEnemyTowerNotification Clone() {
    return new S2CAddEnemyTowerNotification(this);
  }

  /// <summary>Field number for the "towerId" field.</summary>
  public const int TowerIdFieldNumber = 1;
  private int towerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TowerId {
    get { return towerId_; }
    set {
      towerId_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 3;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CAddEnemyTowerNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CAddEnemyTowerNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TowerId != other.TowerId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TowerId != 0) hash ^= TowerId.GetHashCode();
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TowerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TowerId);
    }
    if (X != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TowerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CAddEnemyTowerNotification other) {
    if (other == null) {
      return;
    }
    if (other.TowerId != 0) {
      TowerId = other.TowerId;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TowerId = input.ReadInt32();
          break;
        }
        case 21: {
          X = input.ReadFloat();
          break;
        }
        case 29: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SSpawnMonsterRequest : pb::IMessage<C2SSpawnMonsterRequest> {
  private static readonly pb::MessageParser<C2SSpawnMonsterRequest> _parser = new pb::MessageParser<C2SSpawnMonsterRequest>(() => new C2SSpawnMonsterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SSpawnMonsterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SSpawnMonsterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SSpawnMonsterRequest(C2SSpawnMonsterRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SSpawnMonsterRequest Clone() {
    return new C2SSpawnMonsterRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SSpawnMonsterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SSpawnMonsterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SSpawnMonsterRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class S2CSpawnMonsterResponse : pb::IMessage<S2CSpawnMonsterResponse> {
  private static readonly pb::MessageParser<S2CSpawnMonsterResponse> _parser = new pb::MessageParser<S2CSpawnMonsterResponse>(() => new S2CSpawnMonsterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CSpawnMonsterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnMonsterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnMonsterResponse(S2CSpawnMonsterResponse other) : this() {
    monsterId_ = other.monsterId_;
    monsterNumber_ = other.monsterNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnMonsterResponse Clone() {
    return new S2CSpawnMonsterResponse(this);
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 1;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  /// <summary>Field number for the "monsterNumber" field.</summary>
  public const int MonsterNumberFieldNumber = 2;
  private int monsterNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterNumber {
    get { return monsterNumber_; }
    set {
      monsterNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CSpawnMonsterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CSpawnMonsterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonsterId != other.MonsterId) return false;
    if (MonsterNumber != other.MonsterNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (MonsterNumber != 0) hash ^= MonsterNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MonsterId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MonsterId);
    }
    if (MonsterNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MonsterNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (MonsterNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CSpawnMonsterResponse other) {
    if (other == null) {
      return;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    if (other.MonsterNumber != 0) {
      MonsterNumber = other.MonsterNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MonsterId = input.ReadInt32();
          break;
        }
        case 16: {
          MonsterNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CSpawnEnemyMonsterNotification : pb::IMessage<S2CSpawnEnemyMonsterNotification> {
  private static readonly pb::MessageParser<S2CSpawnEnemyMonsterNotification> _parser = new pb::MessageParser<S2CSpawnEnemyMonsterNotification>(() => new S2CSpawnEnemyMonsterNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CSpawnEnemyMonsterNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnEnemyMonsterNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnEnemyMonsterNotification(S2CSpawnEnemyMonsterNotification other) : this() {
    monsterId_ = other.monsterId_;
    monsterNumber_ = other.monsterNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnEnemyMonsterNotification Clone() {
    return new S2CSpawnEnemyMonsterNotification(this);
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 1;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  /// <summary>Field number for the "monsterNumber" field.</summary>
  public const int MonsterNumberFieldNumber = 2;
  private int monsterNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterNumber {
    get { return monsterNumber_; }
    set {
      monsterNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CSpawnEnemyMonsterNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CSpawnEnemyMonsterNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonsterId != other.MonsterId) return false;
    if (MonsterNumber != other.MonsterNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (MonsterNumber != 0) hash ^= MonsterNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MonsterId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MonsterId);
    }
    if (MonsterNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MonsterNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (MonsterNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CSpawnEnemyMonsterNotification other) {
    if (other == null) {
      return;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    if (other.MonsterNumber != 0) {
      MonsterNumber = other.MonsterNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MonsterId = input.ReadInt32();
          break;
        }
        case 16: {
          MonsterNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2STowerAttackRequest : pb::IMessage<C2STowerAttackRequest> {
  private static readonly pb::MessageParser<C2STowerAttackRequest> _parser = new pb::MessageParser<C2STowerAttackRequest>(() => new C2STowerAttackRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2STowerAttackRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2STowerAttackRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2STowerAttackRequest(C2STowerAttackRequest other) : this() {
    towerId_ = other.towerId_;
    monsterId_ = other.monsterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2STowerAttackRequest Clone() {
    return new C2STowerAttackRequest(this);
  }

  /// <summary>Field number for the "towerId" field.</summary>
  public const int TowerIdFieldNumber = 1;
  private int towerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TowerId {
    get { return towerId_; }
    set {
      towerId_ = value;
    }
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 2;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2STowerAttackRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2STowerAttackRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TowerId != other.TowerId) return false;
    if (MonsterId != other.MonsterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TowerId != 0) hash ^= TowerId.GetHashCode();
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TowerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TowerId);
    }
    if (MonsterId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MonsterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TowerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
    }
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2STowerAttackRequest other) {
    if (other == null) {
      return;
    }
    if (other.TowerId != 0) {
      TowerId = other.TowerId;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TowerId = input.ReadInt32();
          break;
        }
        case 16: {
          MonsterId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyTowerAttackNotification : pb::IMessage<S2CEnemyTowerAttackNotification> {
  private static readonly pb::MessageParser<S2CEnemyTowerAttackNotification> _parser = new pb::MessageParser<S2CEnemyTowerAttackNotification>(() => new S2CEnemyTowerAttackNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyTowerAttackNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyTowerAttackNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyTowerAttackNotification(S2CEnemyTowerAttackNotification other) : this() {
    towerId_ = other.towerId_;
    monsterId_ = other.monsterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyTowerAttackNotification Clone() {
    return new S2CEnemyTowerAttackNotification(this);
  }

  /// <summary>Field number for the "towerId" field.</summary>
  public const int TowerIdFieldNumber = 1;
  private int towerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TowerId {
    get { return towerId_; }
    set {
      towerId_ = value;
    }
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 2;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyTowerAttackNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyTowerAttackNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TowerId != other.TowerId) return false;
    if (MonsterId != other.MonsterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TowerId != 0) hash ^= TowerId.GetHashCode();
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TowerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TowerId);
    }
    if (MonsterId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MonsterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TowerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
    }
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyTowerAttackNotification other) {
    if (other == null) {
      return;
    }
    if (other.TowerId != 0) {
      TowerId = other.TowerId;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TowerId = input.ReadInt32();
          break;
        }
        case 16: {
          MonsterId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SMonsterAttackBaseRequest : pb::IMessage<C2SMonsterAttackBaseRequest> {
  private static readonly pb::MessageParser<C2SMonsterAttackBaseRequest> _parser = new pb::MessageParser<C2SMonsterAttackBaseRequest>(() => new C2SMonsterAttackBaseRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SMonsterAttackBaseRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMonsterAttackBaseRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMonsterAttackBaseRequest(C2SMonsterAttackBaseRequest other) : this() {
    damage_ = other.damage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMonsterAttackBaseRequest Clone() {
    return new C2SMonsterAttackBaseRequest(this);
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 1;
  private int damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SMonsterAttackBaseRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SMonsterAttackBaseRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Damage != other.Damage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Damage != 0) hash ^= Damage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Damage != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Damage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Damage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SMonsterAttackBaseRequest other) {
    if (other == null) {
      return;
    }
    if (other.Damage != 0) {
      Damage = other.Damage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Damage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CUpdateBaseHPNotification : pb::IMessage<S2CUpdateBaseHPNotification> {
  private static readonly pb::MessageParser<S2CUpdateBaseHPNotification> _parser = new pb::MessageParser<S2CUpdateBaseHPNotification>(() => new S2CUpdateBaseHPNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CUpdateBaseHPNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CUpdateBaseHPNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CUpdateBaseHPNotification(S2CUpdateBaseHPNotification other) : this() {
    isOpponent_ = other.isOpponent_;
    baseHp_ = other.baseHp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CUpdateBaseHPNotification Clone() {
    return new S2CUpdateBaseHPNotification(this);
  }

  /// <summary>Field number for the "isOpponent" field.</summary>
  public const int IsOpponentFieldNumber = 1;
  private bool isOpponent_;
  /// <summary>
  /// HP를 업데이트 할 기지가 상대방 기지라면 true
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOpponent {
    get { return isOpponent_; }
    set {
      isOpponent_ = value;
    }
  }

  /// <summary>Field number for the "baseHp" field.</summary>
  public const int BaseHpFieldNumber = 2;
  private int baseHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaseHp {
    get { return baseHp_; }
    set {
      baseHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CUpdateBaseHPNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CUpdateBaseHPNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsOpponent != other.IsOpponent) return false;
    if (BaseHp != other.BaseHp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsOpponent != false) hash ^= IsOpponent.GetHashCode();
    if (BaseHp != 0) hash ^= BaseHp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsOpponent != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsOpponent);
    }
    if (BaseHp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BaseHp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsOpponent != false) {
      size += 1 + 1;
    }
    if (BaseHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseHp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CUpdateBaseHPNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsOpponent != false) {
      IsOpponent = other.IsOpponent;
    }
    if (other.BaseHp != 0) {
      BaseHp = other.BaseHp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsOpponent = input.ReadBool();
          break;
        }
        case 16: {
          BaseHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CGameOverNotification : pb::IMessage<S2CGameOverNotification> {
  private static readonly pb::MessageParser<S2CGameOverNotification> _parser = new pb::MessageParser<S2CGameOverNotification>(() => new S2CGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameOverNotification(S2CGameOverNotification other) : this() {
    isWin_ = other.isWin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameOverNotification Clone() {
    return new S2CGameOverNotification(this);
  }

  /// <summary>Field number for the "isWin" field.</summary>
  public const int IsWinFieldNumber = 1;
  private bool isWin_;
  /// <summary>
  /// 받는 플레이어가 승리했으면 true
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsWin {
    get { return isWin_; }
    set {
      isWin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsWin != other.IsWin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsWin != false) hash ^= IsWin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsWin != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsWin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsWin != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CGameOverNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsWin != false) {
      IsWin = other.IsWin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsWin = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SGameEndRequest : pb::IMessage<C2SGameEndRequest> {
  private static readonly pb::MessageParser<C2SGameEndRequest> _parser = new pb::MessageParser<C2SGameEndRequest>(() => new C2SGameEndRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SGameEndRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameEndRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameEndRequest(C2SGameEndRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameEndRequest Clone() {
    return new C2SGameEndRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SGameEndRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SGameEndRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SGameEndRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class C2SMonsterDeathNotification : pb::IMessage<C2SMonsterDeathNotification> {
  private static readonly pb::MessageParser<C2SMonsterDeathNotification> _parser = new pb::MessageParser<C2SMonsterDeathNotification>(() => new C2SMonsterDeathNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SMonsterDeathNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMonsterDeathNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMonsterDeathNotification(C2SMonsterDeathNotification other) : this() {
    monsterId_ = other.monsterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMonsterDeathNotification Clone() {
    return new C2SMonsterDeathNotification(this);
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 1;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SMonsterDeathNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SMonsterDeathNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonsterId != other.MonsterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MonsterId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MonsterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SMonsterDeathNotification other) {
    if (other == null) {
      return;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MonsterId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyMonsterDeathNotification : pb::IMessage<S2CEnemyMonsterDeathNotification> {
  private static readonly pb::MessageParser<S2CEnemyMonsterDeathNotification> _parser = new pb::MessageParser<S2CEnemyMonsterDeathNotification>(() => new S2CEnemyMonsterDeathNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyMonsterDeathNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyMonsterDeathNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyMonsterDeathNotification(S2CEnemyMonsterDeathNotification other) : this() {
    monsterId_ = other.monsterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyMonsterDeathNotification Clone() {
    return new S2CEnemyMonsterDeathNotification(this);
  }

  /// <summary>Field number for the "monsterId" field.</summary>
  public const int MonsterIdFieldNumber = 1;
  private int monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyMonsterDeathNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyMonsterDeathNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MonsterId != other.MonsterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MonsterId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MonsterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyMonsterDeathNotification other) {
    if (other == null) {
      return;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MonsterId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 최상위 GamePacket 메시지
/// </summary>
public sealed partial class GamePacket : pb::IMessage<GamePacket> {
  private static readonly pb::MessageParser<GamePacket> _parser = new pb::MessageParser<GamePacket>(() => new GamePacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GamePacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket(GamePacket other) : this() {
    switch (other.PayloadCase) {
      case PayloadOneofCase.RegisterRequest:
        RegisterRequest = other.RegisterRequest.Clone();
        break;
      case PayloadOneofCase.RegisterResponse:
        RegisterResponse = other.RegisterResponse.Clone();
        break;
      case PayloadOneofCase.LoginRequest:
        LoginRequest = other.LoginRequest.Clone();
        break;
      case PayloadOneofCase.LoginResponse:
        LoginResponse = other.LoginResponse.Clone();
        break;
      case PayloadOneofCase.MatchRequest:
        MatchRequest = other.MatchRequest.Clone();
        break;
      case PayloadOneofCase.MatchStartNotification:
        MatchStartNotification = other.MatchStartNotification.Clone();
        break;
      case PayloadOneofCase.StateSyncNotification:
        StateSyncNotification = other.StateSyncNotification.Clone();
        break;
      case PayloadOneofCase.TowerPurchaseRequest:
        TowerPurchaseRequest = other.TowerPurchaseRequest.Clone();
        break;
      case PayloadOneofCase.TowerPurchaseResponse:
        TowerPurchaseResponse = other.TowerPurchaseResponse.Clone();
        break;
      case PayloadOneofCase.AddEnemyTowerNotification:
        AddEnemyTowerNotification = other.AddEnemyTowerNotification.Clone();
        break;
      case PayloadOneofCase.SpawnMonsterRequest:
        SpawnMonsterRequest = other.SpawnMonsterRequest.Clone();
        break;
      case PayloadOneofCase.SpawnMonsterResponse:
        SpawnMonsterResponse = other.SpawnMonsterResponse.Clone();
        break;
      case PayloadOneofCase.SpawnEnemyMonsterNotification:
        SpawnEnemyMonsterNotification = other.SpawnEnemyMonsterNotification.Clone();
        break;
      case PayloadOneofCase.TowerAttackRequest:
        TowerAttackRequest = other.TowerAttackRequest.Clone();
        break;
      case PayloadOneofCase.EnemyTowerAttackNotification:
        EnemyTowerAttackNotification = other.EnemyTowerAttackNotification.Clone();
        break;
      case PayloadOneofCase.MonsterAttackBaseRequest:
        MonsterAttackBaseRequest = other.MonsterAttackBaseRequest.Clone();
        break;
      case PayloadOneofCase.UpdateBaseHpNotification:
        UpdateBaseHpNotification = other.UpdateBaseHpNotification.Clone();
        break;
      case PayloadOneofCase.GameOverNotification:
        GameOverNotification = other.GameOverNotification.Clone();
        break;
      case PayloadOneofCase.GameEndRequest:
        GameEndRequest = other.GameEndRequest.Clone();
        break;
      case PayloadOneofCase.MonsterDeathNotification:
        MonsterDeathNotification = other.MonsterDeathNotification.Clone();
        break;
      case PayloadOneofCase.EnemyMonsterDeathNotification:
        EnemyMonsterDeathNotification = other.EnemyMonsterDeathNotification.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket Clone() {
    return new GamePacket(this);
  }

  /// <summary>Field number for the "registerRequest" field.</summary>
  public const int RegisterRequestFieldNumber = 1;
  /// <summary>
  /// 회원가입 및 로그인
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SRegisterRequest RegisterRequest {
    get { return payloadCase_ == PayloadOneofCase.RegisterRequest ? (global::C2SRegisterRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RegisterRequest;
    }
  }

  /// <summary>Field number for the "registerResponse" field.</summary>
  public const int RegisterResponseFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CRegisterResponse RegisterResponse {
    get { return payloadCase_ == PayloadOneofCase.RegisterResponse ? (global::S2CRegisterResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RegisterResponse;
    }
  }

  /// <summary>Field number for the "loginRequest" field.</summary>
  public const int LoginRequestFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SLoginRequest LoginRequest {
    get { return payloadCase_ == PayloadOneofCase.LoginRequest ? (global::C2SLoginRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LoginRequest;
    }
  }

  /// <summary>Field number for the "loginResponse" field.</summary>
  public const int LoginResponseFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CLoginResponse LoginResponse {
    get { return payloadCase_ == PayloadOneofCase.LoginResponse ? (global::S2CLoginResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LoginResponse;
    }
  }

  /// <summary>Field number for the "matchRequest" field.</summary>
  public const int MatchRequestFieldNumber = 5;
  /// <summary>
  /// 매칭
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SMatchRequest MatchRequest {
    get { return payloadCase_ == PayloadOneofCase.MatchRequest ? (global::C2SMatchRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchRequest;
    }
  }

  /// <summary>Field number for the "matchStartNotification" field.</summary>
  public const int MatchStartNotificationFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CMatchStartNotification MatchStartNotification {
    get { return payloadCase_ == PayloadOneofCase.MatchStartNotification ? (global::S2CMatchStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchStartNotification;
    }
  }

  /// <summary>Field number for the "stateSyncNotification" field.</summary>
  public const int StateSyncNotificationFieldNumber = 7;
  /// <summary>
  /// 상태 동기화
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CStateSyncNotification StateSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.StateSyncNotification ? (global::S2CStateSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StateSyncNotification;
    }
  }

  /// <summary>Field number for the "towerPurchaseRequest" field.</summary>
  public const int TowerPurchaseRequestFieldNumber = 8;
  /// <summary>
  /// 타워 구입 및 배치
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2STowerPurchaseRequest TowerPurchaseRequest {
    get { return payloadCase_ == PayloadOneofCase.TowerPurchaseRequest ? (global::C2STowerPurchaseRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TowerPurchaseRequest;
    }
  }

  /// <summary>Field number for the "towerPurchaseResponse" field.</summary>
  public const int TowerPurchaseResponseFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CTowerPurchaseResponse TowerPurchaseResponse {
    get { return payloadCase_ == PayloadOneofCase.TowerPurchaseResponse ? (global::S2CTowerPurchaseResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TowerPurchaseResponse;
    }
  }

  /// <summary>Field number for the "addEnemyTowerNotification" field.</summary>
  public const int AddEnemyTowerNotificationFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CAddEnemyTowerNotification AddEnemyTowerNotification {
    get { return payloadCase_ == PayloadOneofCase.AddEnemyTowerNotification ? (global::S2CAddEnemyTowerNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AddEnemyTowerNotification;
    }
  }

  /// <summary>Field number for the "spawnMonsterRequest" field.</summary>
  public const int SpawnMonsterRequestFieldNumber = 11;
  /// <summary>
  /// 몬스터 생성
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SSpawnMonsterRequest SpawnMonsterRequest {
    get { return payloadCase_ == PayloadOneofCase.SpawnMonsterRequest ? (global::C2SSpawnMonsterRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpawnMonsterRequest;
    }
  }

  /// <summary>Field number for the "spawnMonsterResponse" field.</summary>
  public const int SpawnMonsterResponseFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CSpawnMonsterResponse SpawnMonsterResponse {
    get { return payloadCase_ == PayloadOneofCase.SpawnMonsterResponse ? (global::S2CSpawnMonsterResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpawnMonsterResponse;
    }
  }

  /// <summary>Field number for the "spawnEnemyMonsterNotification" field.</summary>
  public const int SpawnEnemyMonsterNotificationFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CSpawnEnemyMonsterNotification SpawnEnemyMonsterNotification {
    get { return payloadCase_ == PayloadOneofCase.SpawnEnemyMonsterNotification ? (global::S2CSpawnEnemyMonsterNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpawnEnemyMonsterNotification;
    }
  }

  /// <summary>Field number for the "towerAttackRequest" field.</summary>
  public const int TowerAttackRequestFieldNumber = 14;
  /// <summary>
  /// 전투 액션
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2STowerAttackRequest TowerAttackRequest {
    get { return payloadCase_ == PayloadOneofCase.TowerAttackRequest ? (global::C2STowerAttackRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TowerAttackRequest;
    }
  }

  /// <summary>Field number for the "enemyTowerAttackNotification" field.</summary>
  public const int EnemyTowerAttackNotificationFieldNumber = 15;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyTowerAttackNotification EnemyTowerAttackNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyTowerAttackNotification ? (global::S2CEnemyTowerAttackNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyTowerAttackNotification;
    }
  }

  /// <summary>Field number for the "monsterAttackBaseRequest" field.</summary>
  public const int MonsterAttackBaseRequestFieldNumber = 16;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SMonsterAttackBaseRequest MonsterAttackBaseRequest {
    get { return payloadCase_ == PayloadOneofCase.MonsterAttackBaseRequest ? (global::C2SMonsterAttackBaseRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MonsterAttackBaseRequest;
    }
  }

  /// <summary>Field number for the "updateBaseHpNotification" field.</summary>
  public const int UpdateBaseHpNotificationFieldNumber = 17;
  /// <summary>
  /// 기지 HP 업데이트 및 게임 오버
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CUpdateBaseHPNotification UpdateBaseHpNotification {
    get { return payloadCase_ == PayloadOneofCase.UpdateBaseHpNotification ? (global::S2CUpdateBaseHPNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UpdateBaseHpNotification;
    }
  }

  /// <summary>Field number for the "gameOverNotification" field.</summary>
  public const int GameOverNotificationFieldNumber = 18;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CGameOverNotification GameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.GameOverNotification ? (global::S2CGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameOverNotification;
    }
  }

  /// <summary>Field number for the "gameEndRequest" field.</summary>
  public const int GameEndRequestFieldNumber = 19;
  /// <summary>
  /// 게임 종료  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SGameEndRequest GameEndRequest {
    get { return payloadCase_ == PayloadOneofCase.GameEndRequest ? (global::C2SGameEndRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameEndRequest;
    }
  }

  /// <summary>Field number for the "monsterDeathNotification" field.</summary>
  public const int MonsterDeathNotificationFieldNumber = 20;
  /// <summary>
  /// 몬스터 사망 통지
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SMonsterDeathNotification MonsterDeathNotification {
    get { return payloadCase_ == PayloadOneofCase.MonsterDeathNotification ? (global::C2SMonsterDeathNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MonsterDeathNotification;
    }
  }

  /// <summary>Field number for the "enemyMonsterDeathNotification" field.</summary>
  public const int EnemyMonsterDeathNotificationFieldNumber = 21;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyMonsterDeathNotification EnemyMonsterDeathNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyMonsterDeathNotification ? (global::S2CEnemyMonsterDeathNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyMonsterDeathNotification;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    RegisterRequest = 1,
    RegisterResponse = 2,
    LoginRequest = 3,
    LoginResponse = 4,
    MatchRequest = 5,
    MatchStartNotification = 6,
    StateSyncNotification = 7,
    TowerPurchaseRequest = 8,
    TowerPurchaseResponse = 9,
    AddEnemyTowerNotification = 10,
    SpawnMonsterRequest = 11,
    SpawnMonsterResponse = 12,
    SpawnEnemyMonsterNotification = 13,
    TowerAttackRequest = 14,
    EnemyTowerAttackNotification = 15,
    MonsterAttackBaseRequest = 16,
    UpdateBaseHpNotification = 17,
    GameOverNotification = 18,
    GameEndRequest = 19,
    MonsterDeathNotification = 20,
    EnemyMonsterDeathNotification = 21,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GamePacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GamePacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RegisterRequest, other.RegisterRequest)) return false;
    if (!object.Equals(RegisterResponse, other.RegisterResponse)) return false;
    if (!object.Equals(LoginRequest, other.LoginRequest)) return false;
    if (!object.Equals(LoginResponse, other.LoginResponse)) return false;
    if (!object.Equals(MatchRequest, other.MatchRequest)) return false;
    if (!object.Equals(MatchStartNotification, other.MatchStartNotification)) return false;
    if (!object.Equals(StateSyncNotification, other.StateSyncNotification)) return false;
    if (!object.Equals(TowerPurchaseRequest, other.TowerPurchaseRequest)) return false;
    if (!object.Equals(TowerPurchaseResponse, other.TowerPurchaseResponse)) return false;
    if (!object.Equals(AddEnemyTowerNotification, other.AddEnemyTowerNotification)) return false;
    if (!object.Equals(SpawnMonsterRequest, other.SpawnMonsterRequest)) return false;
    if (!object.Equals(SpawnMonsterResponse, other.SpawnMonsterResponse)) return false;
    if (!object.Equals(SpawnEnemyMonsterNotification, other.SpawnEnemyMonsterNotification)) return false;
    if (!object.Equals(TowerAttackRequest, other.TowerAttackRequest)) return false;
    if (!object.Equals(EnemyTowerAttackNotification, other.EnemyTowerAttackNotification)) return false;
    if (!object.Equals(MonsterAttackBaseRequest, other.MonsterAttackBaseRequest)) return false;
    if (!object.Equals(UpdateBaseHpNotification, other.UpdateBaseHpNotification)) return false;
    if (!object.Equals(GameOverNotification, other.GameOverNotification)) return false;
    if (!object.Equals(GameEndRequest, other.GameEndRequest)) return false;
    if (!object.Equals(MonsterDeathNotification, other.MonsterDeathNotification)) return false;
    if (!object.Equals(EnemyMonsterDeathNotification, other.EnemyMonsterDeathNotification)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (payloadCase_ == PayloadOneofCase.RegisterRequest) hash ^= RegisterRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RegisterResponse) hash ^= RegisterResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LoginRequest) hash ^= LoginRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LoginResponse) hash ^= LoginResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MatchRequest) hash ^= MatchRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MatchStartNotification) hash ^= MatchStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.StateSyncNotification) hash ^= StateSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TowerPurchaseRequest) hash ^= TowerPurchaseRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TowerPurchaseResponse) hash ^= TowerPurchaseResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AddEnemyTowerNotification) hash ^= AddEnemyTowerNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpawnMonsterRequest) hash ^= SpawnMonsterRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpawnMonsterResponse) hash ^= SpawnMonsterResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpawnEnemyMonsterNotification) hash ^= SpawnEnemyMonsterNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TowerAttackRequest) hash ^= TowerAttackRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyTowerAttackNotification) hash ^= EnemyTowerAttackNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MonsterAttackBaseRequest) hash ^= MonsterAttackBaseRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.UpdateBaseHpNotification) hash ^= UpdateBaseHpNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameOverNotification) hash ^= GameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameEndRequest) hash ^= GameEndRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MonsterDeathNotification) hash ^= MonsterDeathNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyMonsterDeathNotification) hash ^= EnemyMonsterDeathNotification.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (payloadCase_ == PayloadOneofCase.RegisterRequest) {
      output.WriteRawTag(10);
      output.WriteMessage(RegisterRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RegisterResponse) {
      output.WriteRawTag(18);
      output.WriteMessage(RegisterResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LoginRequest) {
      output.WriteRawTag(26);
      output.WriteMessage(LoginRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LoginResponse) {
      output.WriteRawTag(34);
      output.WriteMessage(LoginResponse);
    }
    if (payloadCase_ == PayloadOneofCase.MatchRequest) {
      output.WriteRawTag(42);
      output.WriteMessage(MatchRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MatchStartNotification) {
      output.WriteRawTag(50);
      output.WriteMessage(MatchStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.StateSyncNotification) {
      output.WriteRawTag(58);
      output.WriteMessage(StateSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TowerPurchaseRequest) {
      output.WriteRawTag(66);
      output.WriteMessage(TowerPurchaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.TowerPurchaseResponse) {
      output.WriteRawTag(74);
      output.WriteMessage(TowerPurchaseResponse);
    }
    if (payloadCase_ == PayloadOneofCase.AddEnemyTowerNotification) {
      output.WriteRawTag(82);
      output.WriteMessage(AddEnemyTowerNotification);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnMonsterRequest) {
      output.WriteRawTag(90);
      output.WriteMessage(SpawnMonsterRequest);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnMonsterResponse) {
      output.WriteRawTag(98);
      output.WriteMessage(SpawnMonsterResponse);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnEnemyMonsterNotification) {
      output.WriteRawTag(106);
      output.WriteMessage(SpawnEnemyMonsterNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TowerAttackRequest) {
      output.WriteRawTag(114);
      output.WriteMessage(TowerAttackRequest);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyTowerAttackNotification) {
      output.WriteRawTag(122);
      output.WriteMessage(EnemyTowerAttackNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MonsterAttackBaseRequest) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(MonsterAttackBaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.UpdateBaseHpNotification) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(UpdateBaseHpNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameOverNotification) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(GameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameEndRequest) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(GameEndRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MonsterDeathNotification) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(MonsterDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyMonsterDeathNotification) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(EnemyMonsterDeathNotification);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (payloadCase_ == PayloadOneofCase.RegisterRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterRequest);
    }
    if (payloadCase_ == PayloadOneofCase.RegisterResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterResponse);
    }
    if (payloadCase_ == PayloadOneofCase.LoginRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
    }
    if (payloadCase_ == PayloadOneofCase.LoginResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResponse);
    }
    if (payloadCase_ == PayloadOneofCase.MatchRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MatchStartNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.StateSyncNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TowerPurchaseRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TowerPurchaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.TowerPurchaseResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TowerPurchaseResponse);
    }
    if (payloadCase_ == PayloadOneofCase.AddEnemyTowerNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddEnemyTowerNotification);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnMonsterRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnMonsterRequest);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnMonsterResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnMonsterResponse);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnEnemyMonsterNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnEnemyMonsterNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TowerAttackRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TowerAttackRequest);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyTowerAttackNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnemyTowerAttackNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MonsterAttackBaseRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonsterAttackBaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.UpdateBaseHpNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateBaseHpNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameEndRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameEndRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MonsterDeathNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonsterDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyMonsterDeathNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyMonsterDeathNotification);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GamePacket other) {
    if (other == null) {
      return;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.RegisterRequest:
        if (RegisterRequest == null) {
          RegisterRequest = new global::C2SRegisterRequest();
        }
        RegisterRequest.MergeFrom(other.RegisterRequest);
        break;
      case PayloadOneofCase.RegisterResponse:
        if (RegisterResponse == null) {
          RegisterResponse = new global::S2CRegisterResponse();
        }
        RegisterResponse.MergeFrom(other.RegisterResponse);
        break;
      case PayloadOneofCase.LoginRequest:
        if (LoginRequest == null) {
          LoginRequest = new global::C2SLoginRequest();
        }
        LoginRequest.MergeFrom(other.LoginRequest);
        break;
      case PayloadOneofCase.LoginResponse:
        if (LoginResponse == null) {
          LoginResponse = new global::S2CLoginResponse();
        }
        LoginResponse.MergeFrom(other.LoginResponse);
        break;
      case PayloadOneofCase.MatchRequest:
        if (MatchRequest == null) {
          MatchRequest = new global::C2SMatchRequest();
        }
        MatchRequest.MergeFrom(other.MatchRequest);
        break;
      case PayloadOneofCase.MatchStartNotification:
        if (MatchStartNotification == null) {
          MatchStartNotification = new global::S2CMatchStartNotification();
        }
        MatchStartNotification.MergeFrom(other.MatchStartNotification);
        break;
      case PayloadOneofCase.StateSyncNotification:
        if (StateSyncNotification == null) {
          StateSyncNotification = new global::S2CStateSyncNotification();
        }
        StateSyncNotification.MergeFrom(other.StateSyncNotification);
        break;
      case PayloadOneofCase.TowerPurchaseRequest:
        if (TowerPurchaseRequest == null) {
          TowerPurchaseRequest = new global::C2STowerPurchaseRequest();
        }
        TowerPurchaseRequest.MergeFrom(other.TowerPurchaseRequest);
        break;
      case PayloadOneofCase.TowerPurchaseResponse:
        if (TowerPurchaseResponse == null) {
          TowerPurchaseResponse = new global::S2CTowerPurchaseResponse();
        }
        TowerPurchaseResponse.MergeFrom(other.TowerPurchaseResponse);
        break;
      case PayloadOneofCase.AddEnemyTowerNotification:
        if (AddEnemyTowerNotification == null) {
          AddEnemyTowerNotification = new global::S2CAddEnemyTowerNotification();
        }
        AddEnemyTowerNotification.MergeFrom(other.AddEnemyTowerNotification);
        break;
      case PayloadOneofCase.SpawnMonsterRequest:
        if (SpawnMonsterRequest == null) {
          SpawnMonsterRequest = new global::C2SSpawnMonsterRequest();
        }
        SpawnMonsterRequest.MergeFrom(other.SpawnMonsterRequest);
        break;
      case PayloadOneofCase.SpawnMonsterResponse:
        if (SpawnMonsterResponse == null) {
          SpawnMonsterResponse = new global::S2CSpawnMonsterResponse();
        }
        SpawnMonsterResponse.MergeFrom(other.SpawnMonsterResponse);
        break;
      case PayloadOneofCase.SpawnEnemyMonsterNotification:
        if (SpawnEnemyMonsterNotification == null) {
          SpawnEnemyMonsterNotification = new global::S2CSpawnEnemyMonsterNotification();
        }
        SpawnEnemyMonsterNotification.MergeFrom(other.SpawnEnemyMonsterNotification);
        break;
      case PayloadOneofCase.TowerAttackRequest:
        if (TowerAttackRequest == null) {
          TowerAttackRequest = new global::C2STowerAttackRequest();
        }
        TowerAttackRequest.MergeFrom(other.TowerAttackRequest);
        break;
      case PayloadOneofCase.EnemyTowerAttackNotification:
        if (EnemyTowerAttackNotification == null) {
          EnemyTowerAttackNotification = new global::S2CEnemyTowerAttackNotification();
        }
        EnemyTowerAttackNotification.MergeFrom(other.EnemyTowerAttackNotification);
        break;
      case PayloadOneofCase.MonsterAttackBaseRequest:
        if (MonsterAttackBaseRequest == null) {
          MonsterAttackBaseRequest = new global::C2SMonsterAttackBaseRequest();
        }
        MonsterAttackBaseRequest.MergeFrom(other.MonsterAttackBaseRequest);
        break;
      case PayloadOneofCase.UpdateBaseHpNotification:
        if (UpdateBaseHpNotification == null) {
          UpdateBaseHpNotification = new global::S2CUpdateBaseHPNotification();
        }
        UpdateBaseHpNotification.MergeFrom(other.UpdateBaseHpNotification);
        break;
      case PayloadOneofCase.GameOverNotification:
        if (GameOverNotification == null) {
          GameOverNotification = new global::S2CGameOverNotification();
        }
        GameOverNotification.MergeFrom(other.GameOverNotification);
        break;
      case PayloadOneofCase.GameEndRequest:
        if (GameEndRequest == null) {
          GameEndRequest = new global::C2SGameEndRequest();
        }
        GameEndRequest.MergeFrom(other.GameEndRequest);
        break;
      case PayloadOneofCase.MonsterDeathNotification:
        if (MonsterDeathNotification == null) {
          MonsterDeathNotification = new global::C2SMonsterDeathNotification();
        }
        MonsterDeathNotification.MergeFrom(other.MonsterDeathNotification);
        break;
      case PayloadOneofCase.EnemyMonsterDeathNotification:
        if (EnemyMonsterDeathNotification == null) {
          EnemyMonsterDeathNotification = new global::S2CEnemyMonsterDeathNotification();
        }
        EnemyMonsterDeathNotification.MergeFrom(other.EnemyMonsterDeathNotification);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::C2SRegisterRequest subBuilder = new global::C2SRegisterRequest();
          if (payloadCase_ == PayloadOneofCase.RegisterRequest) {
            subBuilder.MergeFrom(RegisterRequest);
          }
          input.ReadMessage(subBuilder);
          RegisterRequest = subBuilder;
          break;
        }
        case 18: {
          global::S2CRegisterResponse subBuilder = new global::S2CRegisterResponse();
          if (payloadCase_ == PayloadOneofCase.RegisterResponse) {
            subBuilder.MergeFrom(RegisterResponse);
          }
          input.ReadMessage(subBuilder);
          RegisterResponse = subBuilder;
          break;
        }
        case 26: {
          global::C2SLoginRequest subBuilder = new global::C2SLoginRequest();
          if (payloadCase_ == PayloadOneofCase.LoginRequest) {
            subBuilder.MergeFrom(LoginRequest);
          }
          input.ReadMessage(subBuilder);
          LoginRequest = subBuilder;
          break;
        }
        case 34: {
          global::S2CLoginResponse subBuilder = new global::S2CLoginResponse();
          if (payloadCase_ == PayloadOneofCase.LoginResponse) {
            subBuilder.MergeFrom(LoginResponse);
          }
          input.ReadMessage(subBuilder);
          LoginResponse = subBuilder;
          break;
        }
        case 42: {
          global::C2SMatchRequest subBuilder = new global::C2SMatchRequest();
          if (payloadCase_ == PayloadOneofCase.MatchRequest) {
            subBuilder.MergeFrom(MatchRequest);
          }
          input.ReadMessage(subBuilder);
          MatchRequest = subBuilder;
          break;
        }
        case 50: {
          global::S2CMatchStartNotification subBuilder = new global::S2CMatchStartNotification();
          if (payloadCase_ == PayloadOneofCase.MatchStartNotification) {
            subBuilder.MergeFrom(MatchStartNotification);
          }
          input.ReadMessage(subBuilder);
          MatchStartNotification = subBuilder;
          break;
        }
        case 58: {
          global::S2CStateSyncNotification subBuilder = new global::S2CStateSyncNotification();
          if (payloadCase_ == PayloadOneofCase.StateSyncNotification) {
            subBuilder.MergeFrom(StateSyncNotification);
          }
          input.ReadMessage(subBuilder);
          StateSyncNotification = subBuilder;
          break;
        }
        case 66: {
          global::C2STowerPurchaseRequest subBuilder = new global::C2STowerPurchaseRequest();
          if (payloadCase_ == PayloadOneofCase.TowerPurchaseRequest) {
            subBuilder.MergeFrom(TowerPurchaseRequest);
          }
          input.ReadMessage(subBuilder);
          TowerPurchaseRequest = subBuilder;
          break;
        }
        case 74: {
          global::S2CTowerPurchaseResponse subBuilder = new global::S2CTowerPurchaseResponse();
          if (payloadCase_ == PayloadOneofCase.TowerPurchaseResponse) {
            subBuilder.MergeFrom(TowerPurchaseResponse);
          }
          input.ReadMessage(subBuilder);
          TowerPurchaseResponse = subBuilder;
          break;
        }
        case 82: {
          global::S2CAddEnemyTowerNotification subBuilder = new global::S2CAddEnemyTowerNotification();
          if (payloadCase_ == PayloadOneofCase.AddEnemyTowerNotification) {
            subBuilder.MergeFrom(AddEnemyTowerNotification);
          }
          input.ReadMessage(subBuilder);
          AddEnemyTowerNotification = subBuilder;
          break;
        }
        case 90: {
          global::C2SSpawnMonsterRequest subBuilder = new global::C2SSpawnMonsterRequest();
          if (payloadCase_ == PayloadOneofCase.SpawnMonsterRequest) {
            subBuilder.MergeFrom(SpawnMonsterRequest);
          }
          input.ReadMessage(subBuilder);
          SpawnMonsterRequest = subBuilder;
          break;
        }
        case 98: {
          global::S2CSpawnMonsterResponse subBuilder = new global::S2CSpawnMonsterResponse();
          if (payloadCase_ == PayloadOneofCase.SpawnMonsterResponse) {
            subBuilder.MergeFrom(SpawnMonsterResponse);
          }
          input.ReadMessage(subBuilder);
          SpawnMonsterResponse = subBuilder;
          break;
        }
        case 106: {
          global::S2CSpawnEnemyMonsterNotification subBuilder = new global::S2CSpawnEnemyMonsterNotification();
          if (payloadCase_ == PayloadOneofCase.SpawnEnemyMonsterNotification) {
            subBuilder.MergeFrom(SpawnEnemyMonsterNotification);
          }
          input.ReadMessage(subBuilder);
          SpawnEnemyMonsterNotification = subBuilder;
          break;
        }
        case 114: {
          global::C2STowerAttackRequest subBuilder = new global::C2STowerAttackRequest();
          if (payloadCase_ == PayloadOneofCase.TowerAttackRequest) {
            subBuilder.MergeFrom(TowerAttackRequest);
          }
          input.ReadMessage(subBuilder);
          TowerAttackRequest = subBuilder;
          break;
        }
        case 122: {
          global::S2CEnemyTowerAttackNotification subBuilder = new global::S2CEnemyTowerAttackNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyTowerAttackNotification) {
            subBuilder.MergeFrom(EnemyTowerAttackNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyTowerAttackNotification = subBuilder;
          break;
        }
        case 130: {
          global::C2SMonsterAttackBaseRequest subBuilder = new global::C2SMonsterAttackBaseRequest();
          if (payloadCase_ == PayloadOneofCase.MonsterAttackBaseRequest) {
            subBuilder.MergeFrom(MonsterAttackBaseRequest);
          }
          input.ReadMessage(subBuilder);
          MonsterAttackBaseRequest = subBuilder;
          break;
        }
        case 138: {
          global::S2CUpdateBaseHPNotification subBuilder = new global::S2CUpdateBaseHPNotification();
          if (payloadCase_ == PayloadOneofCase.UpdateBaseHpNotification) {
            subBuilder.MergeFrom(UpdateBaseHpNotification);
          }
          input.ReadMessage(subBuilder);
          UpdateBaseHpNotification = subBuilder;
          break;
        }
        case 146: {
          global::S2CGameOverNotification subBuilder = new global::S2CGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.GameOverNotification) {
            subBuilder.MergeFrom(GameOverNotification);
          }
          input.ReadMessage(subBuilder);
          GameOverNotification = subBuilder;
          break;
        }
        case 154: {
          global::C2SGameEndRequest subBuilder = new global::C2SGameEndRequest();
          if (payloadCase_ == PayloadOneofCase.GameEndRequest) {
            subBuilder.MergeFrom(GameEndRequest);
          }
          input.ReadMessage(subBuilder);
          GameEndRequest = subBuilder;
          break;
        }
        case 162: {
          global::C2SMonsterDeathNotification subBuilder = new global::C2SMonsterDeathNotification();
          if (payloadCase_ == PayloadOneofCase.MonsterDeathNotification) {
            subBuilder.MergeFrom(MonsterDeathNotification);
          }
          input.ReadMessage(subBuilder);
          MonsterDeathNotification = subBuilder;
          break;
        }
        case 170: {
          global::S2CEnemyMonsterDeathNotification subBuilder = new global::S2CEnemyMonsterDeathNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyMonsterDeathNotification) {
            subBuilder.MergeFrom(EnemyMonsterDeathNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyMonsterDeathNotification = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
